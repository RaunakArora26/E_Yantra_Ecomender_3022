
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000103 l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000400 g       *ABS*	00000000 __flash_size
00000008 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
000002f8 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000103  w      .debug_info	00000000 .hidden path_planner.c.d1542b7d
00000000 g       *ABS*	00000000 __tbss_size
000002f0 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000338 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
0000031c g     F .text	0000001c memset
00000054 g     F .text	0000029c main
00000040 g       *ABS*	00000000 __ram_size
02000040 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000338 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    04010113          	addi	x2,x2,64 # 2000040 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    33800593          	addi	x11,x0,824
  1c:	    00000613          	addi	x12,x0,0
  20:	    2d8000ef          	jal	x1,2f8 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    2e8000ef          	jal	x1,31c <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    2b0000ef          	jal	x1,2f0 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__ram_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     void _put_str(char *str) { }
     ### 
     ### #endif
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	                   ff010113          	addi	x2,x2,-16
  58:	                   00112623          	sw	x1,12(x2)
  5c:	                   00812423          	sw	x8,8(x2)
     ###     // path_planned[2] = 0;
     ###     // path_planned[3] = 1;
     ###     // path_planned[4] = 11;
     ###     // idx = 5;
     ###     graph[0]=1090;
     ###     graph[1]=2053;
  60:	                   00001737          	lui	x14,0x1
     ###     graph[0]=1090;
  64:	                   02000437          	lui	x8,0x2000
  68:	                   44200793          	addi	x15,x0,1090
  6c:	                   00f42823          	sw	x15,16(x8) # 2000010 <__bss_end+0x10>
     ###     graph[1]=2053;
  70:	                   80570793          	addi	x15,x14,-2043 # 805 <__flash_size+0x405>
  74:	                   00f42a23          	sw	x15,20(x8)
     ###     graph[2]=58;
  78:	                   03a00793          	addi	x15,x0,58
  7c:	                   00f42c23          	sw	x15,24(x8)
     ###     graph[3]=4;
  80:	                   00400793          	addi	x15,x0,4
  84:	                   00f42e23          	sw	x15,28(x8)
     ###     graph[4]=4;
  88:	                   02f42023          	sw	x15,32(x8)
     ###     graph[5]=4;
  8c:	                   02f42223          	sw	x15,36(x8)
     ###     graph[6]=897;
  90:	                   38100793          	addi	x15,x0,897
  94:	                   02f42423          	sw	x15,40(x8)
     ###     graph[7]=64;
  98:	                   04000793          	addi	x15,x0,64
  9c:	                   02f42623          	sw	x15,44(x8)
     ###     graph[8]=64;
  a0:	                   02f42823          	sw	x15,48(x8)
     ###     graph[9]=64;
  a4:	                   02f42a23          	sw	x15,52(x8)
     ###     graph[10]=83888129;
  a8:	                   050017b7          	lui	x15,0x5001
  ac:	                   80178793          	addi	x15,x15,-2047 # 5000801 <__global_pointer$+0x3000001>
  b0:	                   02f42c23          	sw	x15,56(x8)
     ###     graph[11]=529410;
  b4:	                   000817b7          	lui	x15,0x81
  b8:	                   40278793          	addi	x15,x15,1026 # 81402 <__flash_size+0x81002>
  bc:	                   02f42e23          	sw	x15,60(x8)
     ###     graph[12]=26624;
  c0:	                   000077b7          	lui	x15,0x7
  c4:	                   80078793          	addi	x15,x15,-2048 # 6800 <__flash_size+0x6400>
  c8:	                   04f42023          	sw	x15,64(x8)
     ###     graph[13]=4096;
     ###     graph[14]=102400;
  cc:	                   000197b7          	lui	x15,0x19
  d0:	                   04f42423          	sw	x15,72(x8)
     ###     graph[15]=16384;
  d4:	                   000047b7          	lui	x15,0x4
  d8:	                   04f42623          	sw	x15,76(x8)
     ###     graph[16]=409600;
  dc:	                   000647b7          	lui	x15,0x64
  e0:	                   04f42823          	sw	x15,80(x8)
     ###     graph[17]=65536;
  e4:	                   000107b7          	lui	x15,0x10
  e8:	                   04f42a23          	sw	x15,84(x8)
     ###     graph[18]=2686976;
  ec:	                   002907b7          	lui	x15,0x290
  f0:	                   04f42c23          	sw	x15,88(x8)
     ###     graph[19]=1312768;
  f4:	                   001417b7          	lui	x15,0x141
  f8:	                   80078793          	addi	x15,x15,-2048 # 140800 <__flash_size+0x140400>
  fc:	                   04f42e23          	sw	x15,92(x8)
     ###     graph[20]=524288;
 100:	                   000807b7          	lui	x15,0x80
 104:	                   06f42023          	sw	x15,96(x8)
     ###     graph[21]=12845056;
 108:	                   00c407b7          	lui	x15,0xc40
 10c:	                   06f42223          	sw	x15,100(x8)
     ###     graph[22]=2097152;
 110:	                   002007b7          	lui	x15,0x200
 114:	                   06f42423          	sw	x15,104(x8)
     ###     graph[23]=1092616192;
 118:	                   412007b7          	lui	x15,0x41200
 11c:	                   06f42623          	sw	x15,108(x8)
     ###     graph[24]=41944064;
 120:	                   028007b7          	lui	x15,0x2800
 124:	                   40078793          	addi	x15,x15,1024 # 2800400 <__global_pointer$+0x7ffc00>
 128:	                   06f42823          	sw	x15,112(x8)
     ###     graph[25]=16777216;
 12c:	                   010007b7          	lui	x15,0x1000
 130:	                   06f42a23          	sw	x15,116(x8)
     ###     graph[26]=402654208;
 134:	                   180007b7          	lui	x15,0x18000
 138:	                   40078793          	addi	x15,x15,1024 # 18000400 <__global_pointer$+0x15fffc00>
 13c:	                   06f42c23          	sw	x15,120(x8)
     ###     graph[27]=67108864;
 140:	                   040007b7          	lui	x15,0x4000
 144:	                   06f42e23          	sw	x15,124(x8)
     ###     graph[28]=1677721600;
 148:	                   640007b7          	lui	x15,0x64000
 14c:	                   08f42023          	sw	x15,128(x8)
     ###     graph[29]=268435456;
 150:	                   100007b7          	lui	x15,0x10000
     ###     graph[13]=4096;
 154:	                   04e42223          	sw	x14,68(x8)
     ###     graph[29]=268435456;
 158:	                   08f42223          	sw	x15,132(x8)
     ###     graph[30]=2424307712;
 15c:	                   908007b7          	lui	x15,0x90800
 160:	                   08f42423          	sw	x15,136(x8)
     ###     graph[31]=1073741824;
 164:	                   400007b7          	lui	x15,0x40000
 168:	                   08f42623          	sw	x15,140(x8)
     ### 
     ###     
     ### 
     ###     for(i=0;i<V;(i)++)//set all distances to be infinity and all unexplored
     ###         {
     ###             dist[i] = 40;//its infinity for the graph
 16c:	                   02000613          	addi	x12,x0,32
 170:	                   02800593          	addi	x11,x0,40
 174:	                   0d040513          	addi	x10,x8,208
 178:	                   1a4000ef          	jal	x1,31c <memset>
     ###             //visited[i] = 0;
     ###             prev[i] = 255;
 17c:	                   0ff00593          	addi	x11,x0,255
 180:	                   0b140513          	addi	x10,x8,177
 184:	                   02000613          	addi	x12,x0,32
 188:	                   194000ef          	jal	x1,31c <memset>
     ###         }    
     ###         dist[START_POINT] = 0;//set distance of start of itself to be 0;
 18c:	                   00044783          	lbu	x15,0(x8)
     ### int main(int argc, char const *argv[]) {
 190:	                   020005b7          	lui	x11,0x2000
 194:	                   fa000537          	lui	x10,0xfa000
     ###         dist[START_POINT] = 0;//set distance of start of itself to be 0;
 198:	                   0ff7f793          	andi	x15,x15,255
 19c:	                   00f40433          	add	x8,x8,x15
 1a0:	                   0c040823          	sb	x0,208(x8)
 1a4:	                   01f00793          	addi	x15,x0,31
 1a8:	                   cd050513          	addi	x10,x10,-816 # f9fffcd0 <__global_pointer$+0xf7fff4d0>
     ###         {   
     ###             for(j=0;j<V;(j)++)
     ###             {
     ###                 for(k=0;k<V;(k)++)
     ###                 {
     ###                     if((graph[j] & (1 <<(k))) ? 1:0)//It checks for every vertex j and its neighbors k using the bitwise adjacency matrix  
 1ac:	                   00100e13          	addi	x28,x0,1
     ###                     {
     ###                         if(dist[j]!=40 && (dist[j] + 1 < dist[k]))
 1b0:	                   02800f93          	addi	x31,x0,40
 1b4:	                   0d058293          	addi	x5,x11,208 # 20000d0 <__stack+0x90>
     ###                 for(k=0;k<V;(k)++)
 1b8:	                   02000e93          	addi	x29,x0,32
     ###             for(j=0;j<V;(j)++)
 1bc:	                   0f058f13          	addi	x30,x11,240
     ### int main(int argc, char const *argv[]) {
 1c0:	      /----------> 0d058713          	addi	x14,x11,208
 1c4:	      |     /----- 0480006f          	jal	x0,20c <path_planner.c.d1542b7d+0x109>
     ###                     if((graph[j] & (1 <<(k))) ? 1:0)//It checks for every vertex j and its neighbors k using the bitwise adjacency matrix  
 1c8:	      |  /--|----> 00082303          	lw	x6,0(x16)
 1cc:	      |  |  |      00de1633          	sll	x12,x28,x13
 1d0:	      |  |  |      00667633          	and	x12,x12,x6
 1d4:	      |  |  |  /-- 02060463          	beq	x12,x0,1fc <path_planner.c.d1542b7d+0xf9>
     ###                         if(dist[j]!=40 && (dist[j] + 1 < dist[k]))
 1d8:	      |  |  |  |   00074603          	lbu	x12,0(x14)
 1dc:	      |  |  |  +-- 03f60063          	beq	x12,x31,1fc <path_planner.c.d1542b7d+0xf9>
 1e0:	      |  |  |  |   00568333          	add	x6,x13,x5
 1e4:	      |  |  |  |   00034383          	lbu	x7,0(x6)
 1e8:	      |  |  |  |   00160613          	addi	x12,x12,1
 1ec:	      |  |  |  +-- 00765863          	bge	x12,x7,1fc <path_planner.c.d1542b7d+0xf9>
     ###                         {
     ###                             dist[k] = dist[j] + 1;
 1f0:	      |  |  |  |   00c30023          	sb	x12,0(x6)
     ###                             prev[k] = j;
 1f4:	      |  |  |  |   00d58633          	add	x12,x11,x13
 1f8:	      |  |  |  |   0b1608a3          	sb	x17,177(x12)
     ###                 for(k=0;k<V;(k)++)
 1fc:	      |  |  |  \-> 00168693          	addi	x13,x13,1
 200:	      |  +--|----- fdd694e3          	bne	x13,x29,1c8 <path_planner.c.d1542b7d+0xc5>
     ###             for(j=0;j<V;(j)++)
 204:	      |  |  |      00170713          	addi	x14,x14,1
 208:	      |  |  |  /-- 01e70e63          	beq	x14,x30,224 <path_planner.c.d1542b7d+0x121>
 20c:	      |  |  \--|-> 03070893          	addi	x17,x14,48
 210:	      |  |     |   00271813          	slli	x16,x14,0x2
 214:	      |  |     |   0ff8f893          	andi	x17,x17,255
     ###                 for(k=0;k<V;(k)++)
 218:	      |  |     |   00a80833          	add	x16,x16,x10
     ### int main(int argc, char const *argv[]) {
 21c:	      |  |     |   00000693          	addi	x13,x0,0
 220:	      |  \-----|-- fa9ff06f          	jal	x0,1c8 <path_planner.c.d1542b7d+0xc5>
     ###         for(i=0;i<V-1;(i)++)//goes for all the edges
 224:	      |        \-> fff78793          	addi	x15,x15,-1 # 3fffffff <__global_pointer$+0x3dfff7ff>
 228:	      |            0ff7f793          	andi	x15,x15,255
 22c:	      \----------- f8079ae3          	bne	x15,x0,1c0 <path_planner.c.d1542b7d+0xbd>
     ###         // for (j = END_POINT; (j) != 255; j = prev[j]) // Backtrack from the end vertex to start
     ###         // {
     ###         //     path_planned[(idx)++] = (j);
     ###         // }
     ###         idx = 0;
     ###         j = END_POINT;
 230:	                   02000737          	lui	x14,0x2000
 234:	                   00474703          	lbu	x14,4(x14) # 2000004 <__bss_end+0x4>
     ###         while (j != 255) {
     ###         path_planned[(idx)++] = j;
 238:	                   020006b7          	lui	x13,0x2000
     ###         idx = 0;
 23c:	                   00000613          	addi	x12,x0,0
     ###         j = END_POINT;
 240:	                   0ff77713          	andi	x14,x14,255
     ###         while (j != 255) {
 244:	                   0ff00593          	addi	x11,x0,255
     ###         j = prev[j];
 248:	                   0b168513          	addi	x10,x13,177 # 20000b1 <__stack+0x71>
     ###         while (j != 255) {
 24c:	         /-----/-X 04b71663          	bne	x14,x11,298 <path_planner.c.d1542b7d+0x195>
     ###     //     for (i = 0; i < 32; ++i) {
     ###     //     _put_value(path_planned[i]);
     ###     // }
     ###     //     _put_value(idx);
     ###         // Reverse the path_planned array in place
     ###         for (i = 0, j = (idx) - 1; i < j; (i)++, (j)--)
 250:	         |     |   fff60693          	addi	x13,x12,-1
 254:	         |     |   02000737          	lui	x14,0x2000
 258:	         |     |   0ff6f693          	andi	x13,x13,255
 25c:	         |     |   0ef70713          	addi	x14,x14,239 # 20000ef <__stack+0xaf>
 260:	   /-----|--/--|-X 04d7ea63          	bltu	x15,x13,2b4 <path_planner.c.d1542b7d+0x1b1>
 264:	   |     |  |  |   00070793          	addi	x15,x14,0
     ###         
     ### 
     ###     
     ###     // the node values are written into data memory sequentially.
     ###     for (i = 0; i < idx; ++i) {
     ###         NODE_POINT = path_planned[i];
 268:	   |     |  |  |   020006b7          	lui	x13,0x2000
     ###     for (i = 0; i < idx; ++i) {
 26c:	/--|-----|--|--|-> 01178713          	addi	x14,x15,17
 270:	|  |     |  |  |   0ff77713          	andi	x14,x14,255
 274:	|  |  /--|--|--|-- 06c76663          	bltu	x14,x12,2e0 <path_planner.c.d1542b7d+0x1dd>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 278:	|  |  |  |  |  |   020007b7          	lui	x15,0x2000
 27c:	|  |  |  |  |  |   00100713          	addi	x14,x0,1
 280:	|  |  |  |  |  |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 284:	|  |  |  |  |  |   00c12083          	lw	x1,12(x2)
 288:	|  |  |  |  |  |   00812403          	lw	x8,8(x2)
 28c:	|  |  |  |  |  |   00000513          	addi	x10,x0,0
 290:	|  |  |  |  |  |   01010113          	addi	x2,x2,16
 294:	|  |  |  |  |  |   00008067          	jalr	x0,0(x1)
     ###         path_planned[(idx)++] = j;
 298:	|  |  |  |  |  \-> 00160813          	addi	x16,x12,1
 29c:	|  |  |  |  |      00c68633          	add	x12,x13,x12
 2a0:	|  |  |  |  |      0ee607a3          	sb	x14,239(x12)
     ###         j = prev[j];
 2a4:	|  |  |  |  |      00a70733          	add	x14,x14,x10
 2a8:	|  |  |  |  |      00074703          	lbu	x14,0(x14)
     ###         path_planned[(idx)++] = j;
 2ac:	|  |  |  |  |      0ff87613          	andi	x12,x16,255
 2b0:	|  |  |  \--|----- f9dff06f          	jal	x0,24c <path_planner.c.d1542b7d+0x149>
     ###             path_planned[i] = path_planned[j];
 2b4:	|  |  |     \----> 00e685b3          	add	x11,x13,x14
     ###             k = path_planned[i];
 2b8:	|  |  |            00e78533          	add	x10,x15,x14
     ###             path_planned[i] = path_planned[j];
 2bc:	|  |  |            0005c883          	lbu	x17,0(x11)
     ###             k = path_planned[i];
 2c0:	|  |  |            00054803          	lbu	x16,0(x10)
     ###         for (i = 0, j = (idx) - 1; i < j; (i)++, (j)--)
 2c4:	|  |  |            00178793          	addi	x15,x15,1
     ###             path_planned[i] = path_planned[j];
 2c8:	|  |  |            01150023          	sb	x17,0(x10)
     ###         for (i = 0, j = (idx) - 1; i < j; (i)++, (j)--)
 2cc:	|  |  |            fff68693          	addi	x13,x13,-1 # 1ffffff <__flash_size+0x1fffbff>
     ###             path_planned[j] = k;
 2d0:	|  |  |            01058023          	sb	x16,0(x11)
     ###         for (i = 0, j = (idx) - 1; i < j; (i)++, (j)--)
 2d4:	|  |  |            0ff7f793          	andi	x15,x15,255
 2d8:	|  |  |            0ff6f693          	andi	x13,x13,255
 2dc:	|  \--|----------- f85ff06f          	jal	x0,260 <path_planner.c.d1542b7d+0x15d>
     ###         NODE_POINT = path_planned[i];
 2e0:	|     \----------> 0007c703          	lbu	x14,0(x15)
 2e4:	|                  00178793          	addi	x15,x15,1
 2e8:	|                  00e68423          	sb	x14,8(x13)
     ###     for (i = 0; i < idx; ++i) {
 2ec:	\----------------- f81ff06f          	jal	x0,26c <path_planner.c.d1542b7d+0x169>

000002f0 <_set_tls>:
 2f0:	00050213          	addi	x4,x10,0
 2f4:	00008067          	jalr	x0,0(x1)

000002f8 <memcpy>:
 2f8:	       00050313          	addi	x6,x10,0
 2fc:	/----- 00060e63          	beq	x12,x0,318 <memcpy+0x20>
 300:	|  /-> 00058383          	lb	x7,0(x11)
 304:	|  |   00730023          	sb	x7,0(x6)
 308:	|  |   fff60613          	addi	x12,x12,-1
 30c:	|  |   00130313          	addi	x6,x6,1
 310:	|  |   00158593          	addi	x11,x11,1
 314:	|  \-- fe0616e3          	bne	x12,x0,300 <memcpy+0x8>
 318:	\----> 00008067          	jalr	x0,0(x1)

0000031c <memset>:
 31c:	       00050313          	addi	x6,x10,0
 320:	/----- 00060a63          	beq	x12,x0,334 <memset+0x18>
 324:	|  /-> 00b30023          	sb	x11,0(x6)
 328:	|  |   fff60613          	addi	x12,x12,-1
 32c:	|  |   00130313          	addi	x6,x6,1
 330:	|  \-- fe061ae3          	bne	x12,x0,324 <memset+0x8>
 334:	\----> 00008067          	jalr	x0,0(x1)
