
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 
00000378 l     F .text	00000040 addEdge.0.constprop.0
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
0000067a l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000400 g       *ABS*	00000000 __flash_size
00000008 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
000003c0 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
000003b8 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000400 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
000003e4 g     F .text	0000001c memset
00000054 g     F .text	00000324 main
00000040 g       *ABS*	00000000 __ram_size
0000067a  w      .debug_info	00000000 .hidden path_planner.c.3e98cd54
02000040 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000400 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    04010113          	addi	x2,x2,64 # 2000040 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    40000593          	addi	x11,x0,1024
  1c:	    00000613          	addi	x12,x0,0
  20:	    3a0000ef          	jal	x1,3c0 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    3b0000ef          	jal	x1,3e4 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    378000ef          	jal	x1,3b8 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__ram_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     void _put_str(char *str) { }
     ### 
     ### #endif
     ### 
     ### // main function
     ### int main(int argc, char const *argv[]) {
  54:	             f9010113          	addi	x2,x2,-112
     ###     // for(i=0;i<V;(i)++)
     ###     // {
     ###     //     graph[i] = 0;
     ###     // }
     ### 
     ###     addEdge(graph, 0 , 1 );
  58:	             00100593          	addi	x11,x0,1
  5c:	             00000513          	addi	x10,x0,0
     ### int main(int argc, char const *argv[]) {
  60:	             06112623          	sw	x1,108(x2)
  64:	             06812423          	sw	x8,104(x2)
  68:	             06912223          	sw	x9,100(x2)
     ###     addEdge(graph, 0 , 1 );
  6c:	             30c000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 0 , 10);
  70:	             00a00593          	addi	x11,x0,10
  74:	             00000513          	addi	x10,x0,0
  78:	             300000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 0 , 6 );
  7c:	             00600593          	addi	x11,x0,6
  80:	             00000513          	addi	x10,x0,0
  84:	             2f4000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 1 , 11);
  88:	             00b00593          	addi	x11,x0,11
  8c:	             00100513          	addi	x10,x0,1
  90:	             2e8000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 1 , 2 );
  94:	             00200593          	addi	x11,x0,2
  98:	             00100513          	addi	x10,x0,1
  9c:	             2dc000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 2 , 3 );
  a0:	             00300593          	addi	x11,x0,3
  a4:	             00200513          	addi	x10,x0,2
  a8:	             2d0000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 2 , 4 );
  ac:	             00400593          	addi	x11,x0,4
  b0:	             00200513          	addi	x10,x0,2
  b4:	             2c4000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 2 , 5 );
  b8:	             00500593          	addi	x11,x0,5
  bc:	             00200513          	addi	x10,x0,2
  c0:	             2b8000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 6 , 9 );
  c4:	             00900593          	addi	x11,x0,9
  c8:	             00600513          	addi	x10,x0,6
  cc:	             2ac000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 6 , 7 );
  d0:	             00700593          	addi	x11,x0,7
  d4:	             00600513          	addi	x10,x0,6
  d8:	             2a0000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 6 , 8 );
  dc:	             00800593          	addi	x11,x0,8
  e0:	             00600513          	addi	x10,x0,6
  e4:	             294000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 10, 26);
  e8:	             01a00593          	addi	x11,x0,26
  ec:	             00a00513          	addi	x10,x0,10
  f0:	             288000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 10, 11);
  f4:	             00b00593          	addi	x11,x0,11
  f8:	             00a00513          	addi	x10,x0,10
  fc:	             27c000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 10, 24);
 100:	             01800593          	addi	x11,x0,24
 104:	             00a00513          	addi	x10,x0,10
 108:	             270000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 11, 12);
 10c:	             00c00593          	addi	x11,x0,12
 110:	             00b00513          	addi	x10,x0,11
 114:	             264000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 11, 19);
 118:	             01300593          	addi	x11,x0,19
 11c:	             00b00513          	addi	x10,x0,11
 120:	             258000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 26, 27);
 124:	             01b00593          	addi	x11,x0,27
 128:	             01a00513          	addi	x10,x0,26
 12c:	             24c000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 26, 28);
 130:	             01c00593          	addi	x11,x0,28
 134:	             01a00513          	addi	x10,x0,26
 138:	             240000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 28, 29);
 13c:	             01d00593          	addi	x11,x0,29
 140:	             01c00513          	addi	x10,x0,28
 144:	             234000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 28, 30);
 148:	             01e00593          	addi	x11,x0,30
 14c:	             01c00513          	addi	x10,x0,28
 150:	             228000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 30, 31);
 154:	             01f00593          	addi	x11,x0,31
 158:	             01e00513          	addi	x10,x0,30
 15c:	             21c000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 30, 23);
 160:	             01700593          	addi	x11,x0,23
 164:	             01e00513          	addi	x10,x0,30
 168:	             210000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 23, 21);
 16c:	             01500593          	addi	x11,x0,21
 170:	             01700513          	addi	x10,x0,23
 174:	             204000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 23, 24);
 178:	             01800593          	addi	x11,x0,24
 17c:	             01700513          	addi	x10,x0,23
 180:	             1f8000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 24, 25);
 184:	             01900593          	addi	x11,x0,25
 188:	             01800513          	addi	x10,x0,24
 18c:	             1ec000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 21, 22);
 190:	             01600593          	addi	x11,x0,22
 194:	             01500513          	addi	x10,x0,21
 198:	             1e0000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 21, 18);
 19c:	             01200593          	addi	x11,x0,18
 1a0:	             01500513          	addi	x10,x0,21
 1a4:	             1d4000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 18, 19);
 1a8:	             01300593          	addi	x11,x0,19
 1ac:	             01200513          	addi	x10,x0,18
 1b0:	             1c8000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 18, 16);
 1b4:	             01000593          	addi	x11,x0,16
 1b8:	             01200513          	addi	x10,x0,18
 1bc:	             1bc000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 19, 20);
 1c0:	             01400593          	addi	x11,x0,20
 1c4:	             01300513          	addi	x10,x0,19
 1c8:	             1b0000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 16, 17);
 1cc:	             01100593          	addi	x11,x0,17
 1d0:	             01000513          	addi	x10,x0,16
 1d4:	             1a4000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 16, 14);
 1d8:	             00e00593          	addi	x11,x0,14
 1dc:	             01000513          	addi	x10,x0,16
 1e0:	             198000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 14, 15);
 1e4:	             00f00593          	addi	x11,x0,15
 1e8:	             00e00513          	addi	x10,x0,14
 1ec:	             18c000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 14, 12);
 1f0:	             00c00593          	addi	x11,x0,12
 1f4:	             00e00513          	addi	x10,x0,14
 1f8:	             180000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ###     addEdge(graph, 12, 13);
 1fc:	             00d00593          	addi	x11,x0,13
 200:	             00c00513          	addi	x10,x0,12
 204:	             174000ef          	jal	x1,378 <addEdge.0.constprop.0>
     ### 
     ###     dikshtra(graph,START_POINT,END_POINT,path_planned,&idx,&i,&j,&k);//,prev,dist);
 208:	             020007b7          	lui	x15,0x2000
     ###             dist[*i] = 40;//its infinity for the graph
 20c:	             02000613          	addi	x12,x0,32
 210:	             02800593          	addi	x11,x0,40
 214:	             04010513          	addi	x10,x2,64
     ###     dikshtra(graph,START_POINT,END_POINT,path_planned,&idx,&i,&j,&k);//,prev,dist);
 218:	             0007c483          	lbu	x9,0(x15) # 2000000 <__bss_end>
 21c:	             0047c403          	lbu	x8,4(x15)
     ###             dist[*i] = 40;//its infinity for the graph
 220:	             1c4000ef          	jal	x1,3e4 <memset>
     ###             prev[*i] = 255;
 224:	             02000613          	addi	x12,x0,32
 228:	             0ff00593          	addi	x11,x0,255
 22c:	             02010513          	addi	x10,x2,32
 230:	             1b4000ef          	jal	x1,3e4 <memset>
     ###         dist[start] = 0;//set distance of start of itself to be 0;
 234:	             06010793          	addi	x15,x2,96
     ###     dikshtra(graph,START_POINT,END_POINT,path_planned,&idx,&i,&j,&k);//,prev,dist);
 238:	             0ff4f493          	andi	x9,x9,255
     ###         dist[start] = 0;//set distance of start of itself to be 0;
 23c:	             009784b3          	add	x9,x15,x9
     ###     dikshtra(graph,START_POINT,END_POINT,path_planned,&idx,&i,&j,&k);//,prev,dist);
 240:	             0ff47413          	andi	x8,x8,255
     ###         dist[start] = 0;//set distance of start of itself to be 0;
 244:	             fe048023          	sb	x0,-32(x9)
 248:	             01f00793          	addi	x15,x0,31
     ###                     if((graph[*j] & (1 <<(*k))) ? 1:0)//It checks for every vertex j and its neighbors k using the bitwise adjacency matrix  
 24c:	             020008b7          	lui	x17,0x2000
 250:	             00100513          	addi	x10,x0,1
     ###                         if(dist[*j]!=40 && (dist[*j] + 1 < dist[*k]))
 254:	             02800313          	addi	x6,x0,40
     ###                 for(*k=0;*k<V;(*k)++)
 258:	             02000813          	addi	x16,x0,32
     ###                     if((graph[*j] & (1 <<(*k))) ? 1:0)//It checks for every vertex j and its neighbors k using the bitwise adjacency matrix  
 25c:	/----------> 00000713          	addi	x14,x0,0
 260:	|     /----- 0480006f          	jal	x0,2a8 <main+0x254>
 264:	|  /--|----> 00d51633          	sll	x12,x10,x13
 268:	|  |  |      01d67633          	and	x12,x12,x29
 26c:	|  |  |  /-- 02060463          	beq	x12,x0,294 <main+0x240>
     ###                         if(dist[*j]!=40 && (dist[*j] + 1 < dist[*k]))
 270:	|  |  |  |   000e4603          	lbu	x12,0(x28)
 274:	|  |  |  +-- 02660063          	beq	x12,x6,294 <main+0x240>
 278:	|  |  |  |   0005cf83          	lbu	x31,0(x11)
 27c:	|  |  |  |   00160613          	addi	x12,x12,1
 280:	|  |  |  +-- 01f65a63          	bge	x12,x31,294 <main+0x240>
     ###                             dist[*k] = dist[*j] + 1;
 284:	|  |  |  |   00c58023          	sb	x12,0(x11)
     ###                             prev[*k] = *j;
 288:	|  |  |  |   02010613          	addi	x12,x2,32
 28c:	|  |  |  |   00d60633          	add	x12,x12,x13
 290:	|  |  |  |   01e60023          	sb	x30,0(x12)
     ###                 for(*k=0;*k<V;(*k)++)
 294:	|  |  |  \-> 00168693          	addi	x13,x13,1
 298:	|  |  |      00158593          	addi	x11,x11,1
 29c:	|  +--|----- fd0694e3          	bne	x13,x16,264 <main+0x210>
     ###             for(*j=0;*j<V;(*j)++)
 2a0:	|  |  |      00170713          	addi	x14,x14,1
 2a4:	|  |  |  /-- 02d70263          	beq	x14,x13,2c8 <main+0x274>
     ###                     if((graph[*j] & (1 <<(*k))) ? 1:0)//It checks for every vertex j and its neighbors k using the bitwise adjacency matrix  
 2a8:	|  |  \--|-> 00271693          	slli	x13,x14,0x2
 2ac:	|  |     |   00d886b3          	add	x13,x17,x13
 2b0:	|  |     |   04010593          	addi	x11,x2,64
 2b4:	|  |     |   0106ae83          	lw	x29,16(x13)
 2b8:	|  |     |   0ff77f13          	andi	x30,x14,255
 2bc:	|  |     |   00000693          	addi	x13,x0,0
     ###                         if(dist[*j]!=40 && (dist[*j] + 1 < dist[*k]))
 2c0:	|  |     |   00e58e33          	add	x28,x11,x14
 2c4:	|  \-----|-- fa1ff06f          	jal	x0,264 <main+0x210>
     ###         for(*i=0;*i<V-1;(*i)++)//goes for all the edges
 2c8:	|        \-> fff78793          	addi	x15,x15,-1
 2cc:	|            0ff7f793          	andi	x15,x15,255
 2d0:	\----------- f80796e3          	bne	x15,x0,25c <main+0x208>
     ###     uint8_t idx = 0;
 2d4:	             00000693          	addi	x13,x0,0
     ###         for (*j = end; (*j) != 255; (*j) = prev[*j]) // Backtrack from the end vertex to start
 2d8:	             0ff00713          	addi	x14,x0,255
 2dc:	      /----- 0200006f          	jal	x0,2fc <main+0x2a8>
     ###             path_planned[(*idx)++] = (*j);
 2e0:	      |  /-> 06010593          	addi	x11,x2,96
 2e4:	      |  |   00168613          	addi	x12,x13,1
 2e8:	      |  |   00d586b3          	add	x13,x11,x13
 2ec:	      |  |   fa868023          	sb	x8,-96(x13)
     ###         for (*j = end; (*j) != 255; (*j) = prev[*j]) // Backtrack from the end vertex to start
 2f0:	      |  |   00858433          	add	x8,x11,x8
 2f4:	      |  |   fc044403          	lbu	x8,-64(x8)
     ###             path_planned[(*idx)++] = (*j);
 2f8:	      |  |   0ff67693          	andi	x13,x12,255
     ###         for (*j = end; (*j) != 255; (*j) = prev[*j]) // Backtrack from the end vertex to start
 2fc:	      \--\-X fee412e3          	bne	x8,x14,2e0 <main+0x28c>
     ###         for (*i = 0, *j = (*idx) - 1; *i < *j; (*i)++, (*j)--)
 300:	             fff68713          	addi	x14,x13,-1
 304:	   /-------> 0ff77713          	andi	x14,x14,255
 308:	   |     /-- 02e7ea63          	bltu	x15,x14,33c <main+0x2e8>
     ### 
     ### 
     ###     // the node values are written into data memory sequentially.
     ###     for (int i = 0; i < idx; ++i) {
 30c:	   |     |   00000793          	addi	x15,x0,0
     ###         NODE_POINT = path_planned[i];
 310:	   |     |   02000737          	lui	x14,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 314:	/--|--/--|-X 04d7c863          	blt	x15,x13,364 <main+0x310>
     ###     }
     ###     // Path Planning Computation Done Flag
     ###     CPU_DONE = 1;
 318:	|  |  |  |   020007b7          	lui	x15,0x2000
 31c:	|  |  |  |   00100713          	addi	x14,x0,1
 320:	|  |  |  |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         _put_str("################################\n");
     ### 
     ###     #endif
     ### 
     ###     return 0;
     ### }
 324:	|  |  |  |   06c12083          	lw	x1,108(x2)
 328:	|  |  |  |   06812403          	lw	x8,104(x2)
 32c:	|  |  |  |   06412483          	lw	x9,100(x2)
 330:	|  |  |  |   00000513          	addi	x10,x0,0
 334:	|  |  |  |   07010113          	addi	x2,x2,112
 338:	|  |  |  |   00008067          	jalr	x0,0(x1)
     ###             path_planned[*i] = path_planned[*j];
 33c:	|  |  |  \-> 00e10633          	add	x12,x2,x14
     ###             *k = path_planned[*i];
 340:	|  |  |      00f105b3          	add	x11,x2,x15
     ###             path_planned[*i] = path_planned[*j];
 344:	|  |  |      00064803          	lbu	x16,0(x12)
     ###             *k = path_planned[*i];
 348:	|  |  |      0005c503          	lbu	x10,0(x11)
     ###         for (*i = 0, *j = (*idx) - 1; *i < *j; (*i)++, (*j)--)
 34c:	|  |  |      00178793          	addi	x15,x15,1
     ###             path_planned[*i] = path_planned[*j];
 350:	|  |  |      01058023          	sb	x16,0(x11)
     ###             path_planned[*j] = *k;
 354:	|  |  |      00a60023          	sb	x10,0(x12)
     ###         for (*i = 0, *j = (*idx) - 1; *i < *j; (*i)++, (*j)--)
 358:	|  |  |      0ff7f793          	andi	x15,x15,255
 35c:	|  |  |      fff70713          	addi	x14,x14,-1 # 1ffffff <path_planner.c.3e98cd54+0x1fff985>
 360:	|  \--|----- fa5ff06f          	jal	x0,304 <main+0x2b0>
     ###         NODE_POINT = path_planned[i];
 364:	|     \----> 00f10633          	add	x12,x2,x15
 368:	|            00064603          	lbu	x12,0(x12)
     ###     for (int i = 0; i < idx; ++i) {
 36c:	|            00178793          	addi	x15,x15,1
     ###         NODE_POINT = path_planned[i];
 370:	|            00c70423          	sb	x12,8(x14)
     ###     for (int i = 0; i < idx; ++i) {
 374:	\----------- fa1ff06f          	jal	x0,314 <main+0x2c0>

00000378 <addEdge.0.constprop.0>:
     ###         graph[u] |= (1 << v);
 378:	02000737          	lui	x14,0x2000
 37c:	00251693          	slli	x13,x10,0x2
 380:	01070713          	addi	x14,x14,16 # 2000010 <__bss_end+0x10>
 384:	00e686b3          	add	x13,x13,x14
 388:	0006a603          	lw	x12,0(x13)
 38c:	00100793          	addi	x15,x0,1
 390:	00b79833          	sll	x16,x15,x11
 394:	01066633          	or	x12,x12,x16
     ###         graph[v] |= (1 << u);
 398:	00259593          	slli	x11,x11,0x2
     ###         graph[u] |= (1 << v);
 39c:	00c6a023          	sw	x12,0(x13)
     ###         graph[v] |= (1 << u);
 3a0:	00e585b3          	add	x11,x11,x14
 3a4:	00a797b3          	sll	x15,x15,x10
 3a8:	0005a503          	lw	x10,0(x11)
 3ac:	00f567b3          	or	x15,x10,x15
 3b0:	00f5a023          	sw	x15,0(x11)
     ###     } 
 3b4:	00008067          	jalr	x0,0(x1)

000003b8 <_set_tls>:
 3b8:	00050213          	addi	x4,x10,0
 3bc:	00008067          	jalr	x0,0(x1)

000003c0 <memcpy>:
 3c0:	       00050313          	addi	x6,x10,0
 3c4:	/----- 00060e63          	beq	x12,x0,3e0 <memcpy+0x20>
 3c8:	|  /-> 00058383          	lb	x7,0(x11)
 3cc:	|  |   00730023          	sb	x7,0(x6)
 3d0:	|  |   fff60613          	addi	x12,x12,-1
 3d4:	|  |   00130313          	addi	x6,x6,1
 3d8:	|  |   00158593          	addi	x11,x11,1
 3dc:	|  \-- fe0616e3          	bne	x12,x0,3c8 <memcpy+0x8>
 3e0:	\----> 00008067          	jalr	x0,0(x1)

000003e4 <memset>:
 3e4:	       00050313          	addi	x6,x10,0
 3e8:	/----- 00060a63          	beq	x12,x0,3fc <memset+0x18>
 3ec:	|  /-> 00b30023          	sb	x11,0(x6)
 3f0:	|  |   fff60613          	addi	x12,x12,-1
 3f4:	|  |   00130313          	addi	x6,x6,1
 3f8:	|  \-- fe061ae3          	bne	x12,x0,3ec <memset+0x8>
 3fc:	\----> 00008067          	jalr	x0,0(x1)
