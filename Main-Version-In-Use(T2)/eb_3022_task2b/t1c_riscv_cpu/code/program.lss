
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
0000018f l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000400 g       *ABS*	00000000 __flash_size
0000018f  w      .debug_info	00000000 .hidden path_planner.c.f56ae97f
00000008 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
000002d4 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
000002cc g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000314 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
000002f8 g     F .text	0000001c memset
00000054 g     F .text	00000278 main
00000040 g       *ABS*	00000000 __ram_size
02000040 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000318 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    04010113          	addi	x2,x2,64 # 2000040 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    31800593          	addi	x11,x0,792
  1c:	    00000613          	addi	x12,x0,0
  20:	    2b4000ef          	jal	x1,2d4 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    2c4000ef          	jal	x1,2f8 <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    28c000ef          	jal	x1,2cc <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__ram_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     // for (int i = count - 1; i >= 0; i--) {
     ###     //     path_planned[(*idx)++] = temp_path[i];
     ###     // }
     ### // }
     ### 
     ### int main(int argc, char const *argv[]) {
  54:	                   f7010113          	addi	x2,x2,-144
  58:	                   08112623          	sw	x1,140(x2)
  5c:	                   08812423          	sw	x8,136(x2)
     ###     // graph[12] = 0x5B697400; graph[13] = 0x61000000; graph[14] = 0x64798300; graph[15] = 0x71000000;
     ###     // graph[16] = 0x73899100; graph[17] = 0x81000000; graph[18] = 0x819CAA00; graph[19] = 0x5A94A100;
     ###     // graph[20] = 0x99000000; graph[21] = 0x92B1BA00; graph[22] = 0xA9000000; graph[23] = 0xAAC4F100;
     ###     // graph[24] = 0x52BCC900; graph[25] = 0xC1000000; graph[26] = 0x53D9E400; graph[27] = 0x51000000;
     ###     // graph[28] = 0xD4E9F300; graph[29] = 0xE1000000; graph[30] = 0xB9E3F900; graph[31] = 0xF1000000;
     ###     graph[0]=1090; graph[1]=2053; graph[2]=58; graph[3]=4; graph[4]=4;
  60:	                   00001737          	lui	x14,0x1
  64:	                   02000437          	lui	x8,0x2000
  68:	                   44200793          	addi	x15,x0,1090
  6c:	                   00f42823          	sw	x15,16(x8) # 2000010 <__bss_end+0x10>
  70:	                   80570793          	addi	x15,x14,-2043 # 805 <__flash_size+0x405>
  74:	                   00f42a23          	sw	x15,20(x8)
  78:	                   03a00793          	addi	x15,x0,58
  7c:	                   00f42c23          	sw	x15,24(x8)
  80:	                   00400793          	addi	x15,x0,4
  84:	                   00f42e23          	sw	x15,28(x8)
  88:	                   02f42023          	sw	x15,32(x8)
     ###     graph[5]=4; graph[6]=897; graph[7]=64; graph[8]=64; graph[9]=64;
  8c:	                   02f42223          	sw	x15,36(x8)
  90:	                   38100793          	addi	x15,x0,897
  94:	                   02f42423          	sw	x15,40(x8)
  98:	                   04000793          	addi	x15,x0,64
  9c:	                   02f42623          	sw	x15,44(x8)
  a0:	                   02f42823          	sw	x15,48(x8)
  a4:	                   02f42a23          	sw	x15,52(x8)
     ###     graph[10]=83888129; graph[11]=529410; graph[12]=26624; graph[13]=4096;
  a8:	                   050017b7          	lui	x15,0x5001
  ac:	                   80178793          	addi	x15,x15,-2047 # 5000801 <__global_pointer$+0x3000001>
  b0:	                   02f42c23          	sw	x15,56(x8)
  b4:	                   000817b7          	lui	x15,0x81
  b8:	                   40278793          	addi	x15,x15,1026 # 81402 <__flash_size+0x81002>
  bc:	                   02f42e23          	sw	x15,60(x8)
  c0:	                   000077b7          	lui	x15,0x7
  c4:	                   80078793          	addi	x15,x15,-2048 # 6800 <__flash_size+0x6400>
  c8:	                   04f42023          	sw	x15,64(x8)
     ###     graph[14]=102400; graph[15]=16384; graph[16]=409600; graph[17]=65536;
  cc:	                   000197b7          	lui	x15,0x19
  d0:	                   04f42423          	sw	x15,72(x8)
  d4:	                   000047b7          	lui	x15,0x4
  d8:	                   04f42623          	sw	x15,76(x8)
  dc:	                   000647b7          	lui	x15,0x64
  e0:	                   04f42823          	sw	x15,80(x8)
  e4:	                   000107b7          	lui	x15,0x10
  e8:	                   04f42a23          	sw	x15,84(x8)
     ###     graph[18]=2686976; graph[19]=1312768; graph[20]=524288; graph[21]=12845056;
  ec:	                   002907b7          	lui	x15,0x290
  f0:	                   04f42c23          	sw	x15,88(x8)
  f4:	                   001417b7          	lui	x15,0x141
  f8:	                   80078793          	addi	x15,x15,-2048 # 140800 <__flash_size+0x140400>
  fc:	                   04f42e23          	sw	x15,92(x8)
 100:	                   000807b7          	lui	x15,0x80
 104:	                   06f42023          	sw	x15,96(x8)
 108:	                   00c407b7          	lui	x15,0xc40
 10c:	                   06f42223          	sw	x15,100(x8)
     ###     graph[22]=2097152; graph[23]=1092616192; graph[24]=41944064; graph[25]=16777216;
 110:	                   002007b7          	lui	x15,0x200
 114:	                   06f42423          	sw	x15,104(x8)
 118:	                   412007b7          	lui	x15,0x41200
 11c:	                   06f42623          	sw	x15,108(x8)
 120:	                   028007b7          	lui	x15,0x2800
 124:	                   40078793          	addi	x15,x15,1024 # 2800400 <__global_pointer$+0x7ffc00>
 128:	                   06f42823          	sw	x15,112(x8)
 12c:	                   010007b7          	lui	x15,0x1000
 130:	                   06f42a23          	sw	x15,116(x8)
     ###     graph[26]=402654208; graph[27]=67108864; graph[28]=1677721600; graph[29]=268435456;
 134:	                   180007b7          	lui	x15,0x18000
 138:	                   40078793          	addi	x15,x15,1024 # 18000400 <__global_pointer$+0x15fffc00>
 13c:	                   06f42c23          	sw	x15,120(x8)
 140:	                   040007b7          	lui	x15,0x4000
 144:	                   06f42e23          	sw	x15,124(x8)
 148:	                   640007b7          	lui	x15,0x64000
 14c:	                   08f42023          	sw	x15,128(x8)
 150:	                   100007b7          	lui	x15,0x10000
     ###     graph[10]=83888129; graph[11]=529410; graph[12]=26624; graph[13]=4096;
 154:	                   04e42223          	sw	x14,68(x8)
     ###     graph[26]=402654208; graph[27]=67108864; graph[28]=1677721600; graph[29]=268435456;
 158:	                   08f42223          	sw	x15,132(x8)
     ###     graph[30]=2424307712; graph[31]=1073741824;
 15c:	                   908007b7          	lui	x15,0x90800
 160:	                   08f42423          	sw	x15,136(x8)
 164:	                   400007b7          	lui	x15,0x40000
 168:	                   08f42623          	sw	x15,140(x8)
     ### 
     ###     // dijkstra(START_POINT, END_POINT, path_planned, &idx, graph);
     ###     for (int i = 0; i < NODES; i++) {
     ###         dist[i] = INF;
     ###         predecessor[i] = 255;
 16c:	                   02000613          	addi	x12,x0,32
 170:	                   0ff00593          	addi	x11,x0,255
 174:	                   0ce40513          	addi	x10,x8,206
 178:	                   180000ef          	jal	x1,2f8 <memset>
     ###         dist[i] = INF;
 17c:	                   02000613          	addi	x12,x0,32
 180:	                   03200593          	addi	x11,x0,50
 184:	                   0af40513          	addi	x10,x8,175
 188:	                   170000ef          	jal	x1,2f8 <memset>
     ###     }
     ###     dist[START_POINT] = 0;
 18c:	                   00044783          	lbu	x15,0(x8)
 190:	                   020005b7          	lui	x11,0x2000
 194:	                   01f00613          	addi	x12,x0,31
 198:	                   0ff7f793          	andi	x15,x15,255
 19c:	                   00f40433          	add	x8,x8,x15
 1a0:	                   0a0407a3          	sb	x0,175(x8)
     ### 
     ###     for (int i = 0; i < NODES - 1; i++) {
 1a4:	                   0af58813          	addi	x16,x11,175 # 20000af <__stack+0x6f>
     ###         for(int j=0; j< NODES; j++) {
     ###             if (dist[j] != 50) {
 1a8:	                   03200e93          	addi	x29,x0,50
 1ac:	                   01058f13          	addi	x30,x11,16
     ###                 for(int k=0; k<V; k++) {
     ###                     if((graph[j] & (1 <<(k)))) {
 1b0:	                   00100f93          	addi	x31,x0,1
     ###                 for(int k=0; k<V; k++) {
 1b4:	                   02000893          	addi	x17,x0,32
     ###         for(int j=0; j< NODES; j++) {
 1b8:	   /-------------> 00000793          	addi	x15,x0,0
     ###             if (dist[j] != 50) {
 1bc:	   |  /----------> 01078333          	add	x6,x15,x16
 1c0:	   |  |            00034703          	lbu	x14,0(x6)
 1c4:	   |  |  /-------- 05d70463          	beq	x14,x29,20c <path_planner.c.f56ae97f+0x7d>
 1c8:	   |  |  |         00279513          	slli	x10,x15,0x2
 1cc:	   |  |  |         01e50533          	add	x10,x10,x30
     ###                 for(int k=0; k<V; k++) {
 1d0:	   |  |  |         00000713          	addi	x14,x0,0
     ###                     if((graph[j] & (1 <<(k)))) {
 1d4:	   |  |  |  /----> 00052e03          	lw	x28,0(x10)
 1d8:	   |  |  |  |      00ef96b3          	sll	x13,x31,x14
 1dc:	   |  |  |  |      01c6f6b3          	and	x13,x13,x28
 1e0:	   |  |  |  |  /-- 02068263          	beq	x13,x0,204 <path_planner.c.f56ae97f+0x75>
     ###                         if(dist[j] + 1 < dist[k]) {
 1e4:	   |  |  |  |  |   00034683          	lbu	x13,0(x6)
 1e8:	   |  |  |  |  |   01070e33          	add	x28,x14,x16
 1ec:	   |  |  |  |  |   000e4283          	lbu	x5,0(x28)
 1f0:	   |  |  |  |  |   00168693          	addi	x13,x13,1
 1f4:	   |  |  |  |  +-- 0056d863          	bge	x13,x5,204 <path_planner.c.f56ae97f+0x75>
     ###                             dist[k] = dist[j] + 1;
 1f8:	   |  |  |  |  |   00de0023          	sb	x13,0(x28)
     ###                             predecessor[k] = j;
 1fc:	   |  |  |  |  |   00e586b3          	add	x13,x11,x14
 200:	   |  |  |  |  |   0cf68723          	sb	x15,206(x13)
     ###                 for(int k=0; k<V; k++) {
 204:	   |  |  |  |  \-> 00170713          	addi	x14,x14,1
 208:	   |  |  |  \----- fd1716e3          	bne	x14,x17,1d4 <path_planner.c.f56ae97f+0x45>
     ###         for(int j=0; j< NODES; j++) {
 20c:	   |  |  \-------> 00178793          	addi	x15,x15,1 # 40000001 <__global_pointer$+0x3dfff801>
 210:	   |  \----------- fb1796e3          	bne	x15,x17,1bc <path_planner.c.f56ae97f+0x2d>
     ###     for (int i = 0; i < NODES - 1; i++) {
 214:	   |               fff60613          	addi	x12,x12,-1
 218:	   \-------------- fa0610e3          	bne	x12,x0,1b8 <path_planner.c.f56ae97f+0x29>
     ###         }
     ###     }
     ###     int idx = 0;
     ###     
     ###     int temp_path[NODES], count = 0;
     ###     for (int v = END_POINT; v != 255; v = predecessor[v]) {
 21c:	                   020007b7          	lui	x15,0x2000
 220:	                   0047c783          	lbu	x15,4(x15) # 2000004 <__bss_end+0x4>
 224:	                   00010693          	addi	x13,x2,0
     ###     int temp_path[NODES], count = 0;
 228:	                   00000713          	addi	x14,x0,0
     ###     for (int v = END_POINT; v != 255; v = predecessor[v]) {
 22c:	                   0ff7f793          	andi	x15,x15,255
 230:	                   00068513          	addi	x10,x13,0
 234:	                   0ff00613          	addi	x12,x0,255
 238:	                   020005b7          	lui	x11,0x2000
 23c:	      /--------/-X 04c79463          	bne	x15,x12,284 <path_planner.c.f56ae97f+0xf5>
     ###         temp_path[count++] = v;
     ###     }
     ###     for (int i = count - 1; i >= 0; i--) {
     ###         path_planned[(idx)++] = temp_path[i];
 240:	      |        |   020006b7          	lui	x13,0x2000
 244:	      |        |   08f68693          	addi	x13,x13,143 # 200008f <__stack+0x4f>
     ###     for (int i = count - 1; i >= 0; i--) {
 248:	      |        |   fff70793          	addi	x15,x14,-1
 24c:	      |        |   fff00593          	addi	x11,x0,-1
     ###         path_planned[(idx)++] = temp_path[i];
 250:	      |        |   00d706b3          	add	x13,x14,x13
     ###     for (int i = count - 1; i >= 0; i--) {
 254:	   /--|-----/--|-X 04b79463          	bne	x15,x11,29c <path_planner.c.f56ae97f+0x10d>
     ###     }
     ### 
     ### 
     ###     _put_str("Node sequence written to NODE_POINT:\n");
     ###     for (int i = 0; i < idx; ++i) {
 258:	   |  |     |  |   00000793          	addi	x15,x0,0
     ###         NODE_POINT = path_planned[i];
 25c:	   |  |     |  |   020006b7          	lui	x13,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 260:	/--|--|--/--|--|-X 04f71c63          	bne	x14,x15,2b8 <path_planner.c.f56ae97f+0x129>
     ###         // _put_value(NODE_POINT);  // Print each node as it is written to NODE_POINT
     ###     }
     ### 
     ###     CPU_DONE = 1;
 264:	|  |  |  |  |  |   020007b7          	lui	x15,0x2000
 268:	|  |  |  |  |  |   00100713          	addi	x14,x0,1
 26c:	|  |  |  |  |  |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ###         }
     ###         _put_str("################################\n");
     ###     #endif
     ### 
     ###     return 0;
     ### }
 270:	|  |  |  |  |  |   08c12083          	lw	x1,140(x2)
 274:	|  |  |  |  |  |   08812403          	lw	x8,136(x2)
 278:	|  |  |  |  |  |   00000513          	addi	x10,x0,0
 27c:	|  |  |  |  |  |   09010113          	addi	x2,x2,144
 280:	|  |  |  |  |  |   00008067          	jalr	x0,0(x1)
     ###         temp_path[count++] = v;
 284:	|  |  |  |  |  \-> 00f6a023          	sw	x15,0(x13) # 2000000 <__bss_end>
     ###     for (int v = END_POINT; v != 255; v = predecessor[v]) {
 288:	|  |  |  |  |      00f587b3          	add	x15,x11,x15
 28c:	|  |  |  |  |      0ce7c783          	lbu	x15,206(x15)
     ###         temp_path[count++] = v;
 290:	|  |  |  |  |      00170713          	addi	x14,x14,1
     ###     for (int v = END_POINT; v != 255; v = predecessor[v]) {
 294:	|  |  |  |  |      00468693          	addi	x13,x13,4
 298:	|  |  \--|--|----- fa5ff06f          	jal	x0,23c <path_planner.c.f56ae97f+0xad>
     ###         path_planned[(idx)++] = temp_path[i];
 29c:	|  |     |  \----> 00279613          	slli	x12,x15,0x2
 2a0:	|  |     |         00c50633          	add	x12,x10,x12
 2a4:	|  |     |         00062603          	lw	x12,0(x12)
 2a8:	|  |     |         40f68833          	sub	x16,x13,x15
     ###     for (int i = count - 1; i >= 0; i--) {
 2ac:	|  |     |         fff78793          	addi	x15,x15,-1
     ###         path_planned[(idx)++] = temp_path[i];
 2b0:	|  |     |         00c80023          	sb	x12,0(x16)
     ###     for (int i = count - 1; i >= 0; i--) {
 2b4:	|  \-----|-------- fa1ff06f          	jal	x0,254 <path_planner.c.f56ae97f+0xc5>
     ###         NODE_POINT = path_planned[i];
 2b8:	|        \-------> 00f68633          	add	x12,x13,x15
 2bc:	|                  09064603          	lbu	x12,144(x12)
     ###     for (int i = 0; i < idx; ++i) {
 2c0:	|                  00178793          	addi	x15,x15,1
     ###         NODE_POINT = path_planned[i];
 2c4:	|                  00c68423          	sb	x12,8(x13)
     ###     for (int i = 0; i < idx; ++i) {
 2c8:	\----------------- f99ff06f          	jal	x0,260 <path_planner.c.f56ae97f+0xd1>

000002cc <_set_tls>:
 2cc:	00050213          	addi	x4,x10,0
 2d0:	00008067          	jalr	x0,0(x1)

000002d4 <memcpy>:
 2d4:	       00050313          	addi	x6,x10,0
 2d8:	/----- 00060e63          	beq	x12,x0,2f4 <memcpy+0x20>
 2dc:	|  /-> 00058383          	lb	x7,0(x11)
 2e0:	|  |   00730023          	sb	x7,0(x6)
 2e4:	|  |   fff60613          	addi	x12,x12,-1
 2e8:	|  |   00130313          	addi	x6,x6,1
 2ec:	|  |   00158593          	addi	x11,x11,1
 2f0:	|  \-- fe0616e3          	bne	x12,x0,2dc <memcpy+0x8>
 2f4:	\----> 00008067          	jalr	x0,0(x1)

000002f8 <memset>:
 2f8:	       00050313          	addi	x6,x10,0
 2fc:	/----- 00060a63          	beq	x12,x0,310 <memset+0x18>
 300:	|  /-> 00b30023          	sb	x11,0(x6)
 304:	|  |   fff60613          	addi	x12,x12,-1
 308:	|  |   00130313          	addi	x6,x6,1
 30c:	|  \-- fe061ae3          	bne	x12,x0,300 <memset+0x8>
 310:	\----> 00008067          	jalr	x0,0(x1)

00000314 <__text_end>:
 314:	0000                	c.unimp
	...
